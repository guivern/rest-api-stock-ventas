// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using rest_api_sistema_compra_venta.Models;

namespace rest_api_sistema_compra_venta.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190418201838_UsuarioDefault")]
    partial class UsuarioDefault
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("rest_api_sistema_compra_venta.Models.Articulo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Activo");

                    b.Property<string>("Codigo");

                    b.Property<string>("Descripcion");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<long>("IdCategoria");

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.Property<decimal>("PrecioVenta");

                    b.Property<int>("Stock");

                    b.HasKey("Id");

                    b.HasIndex("IdCategoria");

                    b.ToTable("Articulos");
                });

            modelBuilder.Entity("rest_api_sistema_compra_venta.Models.Categoria", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Activo");

                    b.Property<string>("Descripcion");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("rest_api_sistema_compra_venta.Models.Cliente", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Apellido")
                        .IsRequired();

                    b.Property<string>("Descripcion");

                    b.Property<string>("Direccion");

                    b.Property<string>("Email");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<DateTime?>("FechaNacimiento");

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.Property<string>("NumeroDocumento");

                    b.Property<string>("Telefono");

                    b.Property<string>("TipoDocumento");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("rest_api_sistema_compra_venta.Models.DetalleIngreso", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Cantidad");

                    b.Property<string>("Descripcion");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<long>("IdArticulo");

                    b.Property<long>("IdIngreso");

                    b.Property<decimal>("Precio");

                    b.HasKey("Id");

                    b.HasIndex("IdArticulo");

                    b.HasIndex("IdIngreso");

                    b.ToTable("DetallesIngresos");
                });

            modelBuilder.Entity("rest_api_sistema_compra_venta.Models.DetalleVenta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Cantidad");

                    b.Property<string>("Descripcion");

                    b.Property<decimal?>("Descuento");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<long>("IdArticulo");

                    b.Property<long>("IdVenta");

                    b.Property<decimal>("Precio");

                    b.HasKey("Id");

                    b.HasIndex("IdArticulo");

                    b.HasIndex("IdVenta");

                    b.ToTable("DetallesVentas");
                });

            modelBuilder.Entity("rest_api_sistema_compra_venta.Models.Ingreso", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion");

                    b.Property<string>("Estado")
                        .IsRequired();

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime>("FechaHora");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<long>("IdProveedor");

                    b.Property<long>("IdUsuario");

                    b.Property<decimal>("Impuesto");

                    b.Property<string>("NroComprobante")
                        .IsRequired();

                    b.Property<string>("TipoComprobante")
                        .IsRequired();

                    b.Property<decimal>("Total");

                    b.HasKey("Id");

                    b.HasIndex("IdProveedor");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Ingresos");
                });

            modelBuilder.Entity("rest_api_sistema_compra_venta.Models.Proveedor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion");

                    b.Property<string>("Direccion");

                    b.Property<string>("Email");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<string>("NroDocumento")
                        .IsRequired();

                    b.Property<string>("RazonSocial")
                        .IsRequired();

                    b.Property<string>("Telefono");

                    b.Property<string>("TipoDocumento")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Proveedores");
                });

            modelBuilder.Entity("rest_api_sistema_compra_venta.Models.Rol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Activo");

                    b.Property<string>("Descripcion");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Activo = true,
                            Descripcion = "Rol que posee todos los permisos del sistema",
                            FechaCreacion = new DateTime(2019, 4, 18, 16, 18, 37, 117, DateTimeKind.Local).AddTicks(6877),
                            Nombre = "Administrador"
                        },
                        new
                        {
                            Id = 2L,
                            Activo = true,
                            Descripcion = "Rol que posee los permisos del módulo almacén",
                            FechaCreacion = new DateTime(2019, 4, 18, 16, 18, 37, 125, DateTimeKind.Local).AddTicks(2894),
                            Nombre = "Almacenero"
                        },
                        new
                        {
                            Id = 3L,
                            Activo = true,
                            Descripcion = "Rol que posee los permisos del módulo ventas",
                            FechaCreacion = new DateTime(2019, 4, 18, 16, 18, 37, 125, DateTimeKind.Local).AddTicks(3118),
                            Nombre = "Vendedor"
                        });
                });

            modelBuilder.Entity("rest_api_sistema_compra_venta.Models.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Activo");

                    b.Property<string>("Apellido")
                        .IsRequired();

                    b.Property<string>("Descripcion");

                    b.Property<string>("Direccion");

                    b.Property<string>("Email");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<DateTime?>("FechaNacimiento");

                    b.Property<byte[]>("HashPassword")
                        .IsRequired();

                    b.Property<long>("IdRol");

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.Property<string>("NumeroDocumento");

                    b.Property<string>("Telefono");

                    b.Property<string>("TipoDocumento");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdRol");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Activo = true,
                            Apellido = "admin",
                            FechaCreacion = new DateTime(2019, 4, 18, 16, 18, 37, 126, DateTimeKind.Local).AddTicks(1455),
                            HashPassword = new byte[] { 54, 39, 144, 154, 41, 195, 19, 129, 160, 113, 236, 39, 247, 201, 202, 151, 114, 97, 130, 174, 210, 154, 125, 221, 46, 84, 53, 51, 34, 207, 179, 10, 187, 158, 58, 109, 242, 172, 44, 32, 254, 35, 67, 99, 17, 214, 120, 86, 77, 12, 141, 48, 89, 48, 87, 95, 96, 226, 211, 208, 72, 24, 77, 121 },
                            IdRol = 1L,
                            Nombre = "admin",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("rest_api_sistema_compra_venta.Models.Venta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion");

                    b.Property<string>("Estado")
                        .IsRequired();

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime>("FechaHora");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<long>("IdCliente");

                    b.Property<long>("IdUsuario");

                    b.Property<decimal>("Impuesto");

                    b.Property<string>("NroComprobante")
                        .IsRequired();

                    b.Property<string>("TipoComprobante")
                        .IsRequired();

                    b.Property<decimal>("Total");

                    b.HasKey("Id");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Ventas");
                });

            modelBuilder.Entity("rest_api_sistema_compra_venta.Models.Articulo", b =>
                {
                    b.HasOne("rest_api_sistema_compra_venta.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("rest_api_sistema_compra_venta.Models.DetalleIngreso", b =>
                {
                    b.HasOne("rest_api_sistema_compra_venta.Models.Articulo", "Articulo")
                        .WithMany()
                        .HasForeignKey("IdArticulo")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("rest_api_sistema_compra_venta.Models.Ingreso", "Ingreso")
                        .WithMany("Detalles")
                        .HasForeignKey("IdIngreso")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("rest_api_sistema_compra_venta.Models.DetalleVenta", b =>
                {
                    b.HasOne("rest_api_sistema_compra_venta.Models.Articulo", "Articulo")
                        .WithMany()
                        .HasForeignKey("IdArticulo")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("rest_api_sistema_compra_venta.Models.Venta", "Venta")
                        .WithMany("Detalles")
                        .HasForeignKey("IdVenta")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("rest_api_sistema_compra_venta.Models.Ingreso", b =>
                {
                    b.HasOne("rest_api_sistema_compra_venta.Models.Proveedor", "Proveedor")
                        .WithMany()
                        .HasForeignKey("IdProveedor")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("rest_api_sistema_compra_venta.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("rest_api_sistema_compra_venta.Models.Usuario", b =>
                {
                    b.HasOne("rest_api_sistema_compra_venta.Models.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("rest_api_sistema_compra_venta.Models.Venta", b =>
                {
                    b.HasOne("rest_api_sistema_compra_venta.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("rest_api_sistema_compra_venta.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
